=============================================================****
Question 1:
Given two strings s and t, determine whether some anagram of t is a substring of s. 
For example: if s = "udacity" and t = "ad", then the function returns True. 
Your function definition should look like: question1(s, t) and return 
a boolean True or False.
===============================================================***
Explanation:
I started my function by sorting the two strings in a order and found the lengths of each string as i and j.

Then started to searching the matching strings(s & t) with in that range by using for and if loops, and in the last
if 't' is found in 's' then return TRUE if not FALSE. The complexity of the algorithm is O(n^2) if the lengths of s & t strings are equal.

==============================================================******
Question 2:
Given a string a, find the longest palindromic substring contained in a. 
Your function definition should look like question2(a), and return a string.
=================================================================*************
Explanation:

In the first step we are finding the all substrings which are possible using the substring function. The complexity of these function in O(n^2).

In the second step we obtain our longest palindrome using its condition in the if loop. its complexity is O(n^2+n).

================================================================********
Question 3:
Given an undirected graph G, find the minimum spanning tree within G. 
A minimum spanning tree connects all vertices in a graph with the smallest possible 
total weight of edges. Your function should take in and return an adjacency list 
structured like this:

{'A': [('B', 2)],
'B': [('A', 2), ('C', 5)], 
'C': [('B', 5)]}

Vertices are represented as unique strings. The function definition should be question3(G)
========================================================****************

Explanation:

In the first stage made a union of two sets and then attached all elements under the root to get simple calculation

in later stages applied kruskals algorithm to find the minimum spannig tree connects with samllest total weight
edges. The total complexity of the program is O(n log n).

=================================================*******
 Question 4:
Find the least common ancestor between two nodes on a binary search tree. 
The least common ancestor is the farthest node from the root that is an 
ancestor of both nodes. For example, 
the root is a common ancestor of all nodes on the tree, 
but if both nodes are descendents of the root's left child, 
then that left child might be the lowest common ancestor. 
You can assume that both nodes are in the tree, and the tree itself adheres
to all BST properties. The function definition should look like
question4(T, r, n1, n2), where T is the tree represented as a matrix,
 where the index of the list is equal to the integer stored in that node and a 1 
represents a child node, r is a non-negative integer representing the root, 
and n1 and n2 are non-negative integers representing the two nodes in no particular order.
 For example, one test case might be

question4([[0, 1, 0, 0, 0],
           [0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0]],
     3,
         1,
       4)

and the answer would be 3.
=================================================***********

Explanation:

Here we used the loop to find the target nodes left side or the right side based on the decision of the target 
node is taken respectable child node to check it. if result None if the both case fails.

The algorithm use spaces to pass through T. and the time complexity of the function is O(n).


=======================================****
Question 5:

Find the element in a singly linked list that's m 
elements from the end. For example, if a linked list has 5 elements,
 the 3rd element from the end is the 3rd element.
 The function definition should look like question5(ll, m), 
where ll is the first node of a linked list and m is the "mth number from the end".
 You should copy/paste the Node class below to use as a representation of 
a node in the linked list. Return the value of the node at that position.

class Node(object):
 def __init__(self, data):
 self.data = data
    self.next = None
==================================**********

Explanation:

Created a current node and the linked list to insert the new nodes in early stages and to print the 
mth element from the last end of the node.

The complexity of the function is O(n).


